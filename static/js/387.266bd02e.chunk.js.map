{"version":3,"file":"static/js/387.266bd02e.chunk.js","mappings":"6NAEaA,EAAWC,EAAAA,EAAAA,GAAH,4RAaRC,EAAWD,EAAAA,EAAAA,GAAH,+RAQRE,EAAUF,EAAAA,EAAAA,IAAH,iFAMPG,EAAWH,EAAAA,EAAAA,EAAH,8S,iDCoBrB,EAzCa,WACX,OAAkCI,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,IACXI,EAAAA,EAAAA,IAAQH,GACLI,MAAK,SAAAC,GACJ,IAAMC,EAAQD,EAAOE,KAAKC,KACxB,YACE,MAAO,CAAEC,GADgC,EAAxCA,GACYC,UAD4B,EAApCA,UACmBC,KADiB,EAAzBA,KACcC,aADW,EAAnBA,aAEvB,IAEHf,EAAaS,EACd,IACAO,SAAQ,WACPd,GAAW,EACZ,GACJ,GAAE,CAACC,KAGF,gCACGJ,GAAaA,EAAUkB,OAAS,GAC/B,SAACxB,EAAD,UACGM,EAAUY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACb,UAACpB,EAAD,YACE,SAACC,EAAD,CAASsB,IAAG,UAAKJ,GAAQK,IAAG,UAAKC,EAAAA,IAAL,OAAoBL,MAEhD,SAAClB,EAAD,UAAWiB,KACX,UAACjB,EAAD,yBAAsBgB,OAJTD,EADF,OAUjB,SAACf,EAAD,uDAEDI,IAAW,SAACoB,EAAA,EAAD,MAGjB,C,gFC9CYC,E,QAAkB5B,EAAAA,IAAH,4D,SCCf2B,EAAS,WACpB,OACE,SAACC,EAAD,WACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAIhB,C,gLClBD,IAAMC,EAAe,mCAERX,EAAe,kCAEfY,EAAoB,WAC/B,OAAOC,MAAM,yDAAD,OAC+CF,IACzDxB,MAAK,SAAA2B,GACL,OAAOA,EAAIC,MACZ,GACF,EAEYC,EAAkB,SAAAjC,GAC7B,OAAO8B,MAAM,sCAAD,OAC4B9B,EAD5B,oBAC+C4B,EAD/C,oBAEVxB,MAAK,SAAA2B,GACL,OAAOA,EAAIC,MACZ,GACF,EAEYE,EAAiB,SAAAC,GAC5B,OAAOL,MAAM,qDAAD,OAC2CF,EAD3C,kBACiEO,EADjE,+CAEV/B,MAAK,SAAA2B,GACL,OAAOA,EAAIC,MACZ,GACF,EAEY7B,EAAU,SAAAH,GACrB,OAAO8B,MAAM,sCAAD,OAC4B9B,EAD5B,4BACuD4B,EADvD,wBAEVxB,MAAK,SAAA2B,GACL,OAAOA,EAAIC,MACZ,GACF,EAEYI,EAAa,SAAApC,GACxB,OAAO8B,MAAM,sCAAD,OAC4B9B,EAD5B,4BACuD4B,EADvD,2BAEVxB,MAAK,SAAA2B,GACL,OAAOA,EAAIC,MACZ,GACF,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","services.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 54px);\n  grid-template-columns: repeat(auto-fill, minmax(110px, 1fr));\n  grid-gap: 8px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 15px 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastItem = styled.li`\n  padding-bottom: 4px;\n  background: #1f1f1f;\n  border-radius: 8px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\nexport const CastImg = styled.img`\n  display: block;\n  width: 100%;\n  object-fit: cover;\n`;\n\nexport const CastText = styled.p`\n  margin: 0;\n  /* display: block; */\n  text-align: center;\n  text-decoration: none;\n\n  /* font-family: 'Poppins'; */\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.3;\n  letter-spacing: -0.011em;\n\n  color: #ffffff;\n\n  opacity: 0.56;\n`;\n","import { CastList, CastItem, CastImg, CastText } from './Cast.styled';\n\nimport { useParams } from 'react-router-dom';\n\nimport { useState, useEffect } from 'react';\nimport { Loader } from 'components/Loader/Loader';\nimport { getCast, BASE_IMG_URL } from 'services';\n\nconst Cast = () => {\n  const [castArray, setCastArray] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    getCast(movieId)\n      .then(promis => {\n        const array = promis.cast.map(\n          ({ id, character, name, profile_path }) => {\n            return { id, character, name, profile_path };\n          }\n        );\n        setCastArray(array);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {castArray && castArray.length > 0 ? (\n        <CastList>\n          {castArray.map(({ id, character, name, profile_path }) => (\n            <CastItem key={id}>\n              <CastImg alt={`${name}`} src={`${BASE_IMG_URL}${profile_path}`} />\n\n              <CastText>{name}</CastText>\n              <CastText>Character: {character}</CastText>\n            </CastItem>\n          ))}\n        </CastList>\n      ) : (\n        <CastText>'We do not have any cast for this movie'</CastText>\n      )}\n      {loading && <Loader />}\n    </>\n  );\n};\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const LoaderContainer = styled.div`\n  margin: 0 auto;\n  width: 100px;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderContainer>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color=\"#d71b1b\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </LoaderContainer>\n  );\n};\n","const PERSONAL_KEY = 'd78968a65961b0fbd63bb81018ffc9d2';\n\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getTrendingMovies = () => {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${PERSONAL_KEY}`\n  ).then(res => {\n    return res.json();\n  });\n};\n\nexport const getMovieDetails = movieId => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${PERSONAL_KEY}&language=en-US`\n  ).then(res => {\n    return res.json();\n  });\n};\n\nexport const getQueryMovies = query => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${PERSONAL_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  ).then(res => {\n    return res.json();\n  });\n};\n\nexport const getCast = movieId => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${PERSONAL_KEY}&language=en-US    `\n  ).then(res => {\n    return res.json();\n  });\n};\n\nexport const getReviews = movieId => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${PERSONAL_KEY}&language=en-US&page=1`\n  ).then(res => {\n    return res.json();\n  });\n};\n"],"names":["CastList","styled","CastItem","CastImg","CastText","useState","castArray","setCastArray","loading","setLoading","movieId","useParams","useEffect","getCast","then","promis","array","cast","map","id","character","name","profile_path","finally","length","alt","src","BASE_IMG_URL","Loader","LoaderContainer","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","PERSONAL_KEY","getTrendingMovies","fetch","res","json","getMovieDetails","getQueryMovies","query","getReviews"],"sourceRoot":""}